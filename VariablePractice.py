"""Q1 홍길동 씨의 과목별 점수는 다음과 같다. 홍길동 씨의 평균 점수를 구해 보자.

과목	점수
국어	80
영어	75
수학	55"""

values = {'국어': 80, '영어': 75, '수학': 55}
sum = 0
for score in values.values():
    sum += score
print(sum / len(values))

"""Q2 자연수 13이 홀수인지 짝수인지 판별할 수 있는 방법에 대해 말해 보자."""
value = 13
if value % 2:
    print('홀수입니다')
else:
    print('짝수입니다')

"""
Q3
홍길동 씨의 주민등록번호는 881120-1068234이다. 홍길동 씨의 주민등록번호를 연월일(YYYYMMDD) 부분과 그 뒤의 숫자 부분으로 나누어 출력해 보자.

※ 문자열 슬라이싱 기법을 사용해 보자.
"""
privateNum = "881120-1068234"
print("앞 번호: " + privateNum[0:6])
print("앞 번호: " + privateNum[7:14])

"""
Q4
주민등록번호 뒷자리의 맨 첫 번째 숫자는 성별을 나타낸다. 주민등록번호에서 성별을 나타내는 숫자를 출력해 보자.

>>> pin = "881120-1068234"
※ 문자열 인덱싱을 사용해 보자.
"""
pin = "881120-1068234"
print("성별 숫자: " + pin[7])

"""
Q5
다음과 같은 문자열 a:b:c:d가 있다. 문자열의 replace 함수를 사용하여 a#b#c#d로 바꿔서 출력해 보자.

>>> a = "a:b:c:d"
"""
a = "a:b:c:d"
a.replace(':', "#")
print(a)

"""
Q6
[1, 3, 5, 4, 2] 리스트를 [5, 4, 3, 2, 1]로 만들어 보자.

※ 리스트의 내장 함수를 사용해 보자.
"""

array = [1, 3, 5, 4, 2]
array.sort()
array.reverse()
print(array)

"""
Q7
['Life', 'is', 'too', 'short'] 리스트를 Life is too short 문자열로 만들어 출력해 보자.

※ 문자열의 join 함수를 사용하면 리스트를 문자열로 쉽게 만들 수 있다.
"""

array2 = ['Life', 'is', 'too', 'short']
str = "";
print(str.join(array2))

"""
Q8
(1,2,3) 튜플에 값 4를 추가하여 (1,2,3,4)를 만들어 출력해 보자.

※ 더하기(+)를 사용해 보자.
"""

array3 = (1, 2, 3)
array3 += (4,)
print(array3)

"""
Q9
다음과 같은 딕셔너리 a가 있다.

>>> a = dict()
>>> a
{}
다음 중 오류가 발생하는 경우를 고르고, 그 이유를 설명해 보자.

a['name'] = 'python'
a[('a',)] = 'python'
a[[1]] = 'python'
a[250] = 'python'
"""

"""
a[('a',)] = 'python' 은 Set이기 떄문에 Immutable  
a[[1]] = 'python' 는 배열이라서 Mutable

키값에는 mmutable이 들어갈 수 없다. Immutable이어야함
"""

"""
Q10
딕셔너리 a에서 'B'에 해당되는 값을 추출해 보자.

>>> a = {'A':90, 'B':80, 'C':70}
※ 딕셔너리의 pop 함수를 사용해 보자.
"""
a = {'A': 90, 'B': 80, 'C': 70}
a.pop('B')
print(a)

"""
Q11
a 리스트에서 중복 숫자를 제거해 보자.

>>> a = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5]
※ 집합 자료형의 요솟값이 중복될 수 없다는 특징을 사용해 보자.
"""
a = [1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5]
a = list(set(a))
print(a)

"""
Q12
파이썬은 다음처럼 동일한 값에 여러 개의 변수를 선언할 수 있다. 
다음과 같이 a, b 변수를 선언한 후 a의 두 번째 요솟값을 변경하면 b 값은 어떻게 될까?
그리고 이런 결과가 오는 이유에 대해 설명해 보자.

>>> a = b = [1, 2, 3]
>>> a[1] = 4
>>> print(b)
"""
a = b = [1, 2, 3]
a[1] = 4
print(b)

"""
a = b의 의미는 b의 값과 같은 새로운 객체를 의미하는 것이 아니라
b의 객체를 참조한다는 의미이다. 따라서 a를 변화시켜도 b가 변화된다.
"""
